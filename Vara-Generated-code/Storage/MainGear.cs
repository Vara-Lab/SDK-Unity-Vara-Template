//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Substrate.Vara.NET.NetApiExt.Generated.Storage
{
    
    
    /// <summary>
    /// >> GearStorage
    /// </summary>
    public sealed class GearStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> GearStorage Constructor
        /// </summary>
        public GearStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Gear", "ExecuteInherent"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.Bool)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Gear", "BlockNumber"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Gear", "GearRunInBlock"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple)));
        }
        
        /// <summary>
        /// >> ExecuteInherentParams
        ///  A flag indicating whether the message queue should be processed at the end of a block
        /// 
        ///  If not set, the inherent extrinsic that processes the queue will keep throwing an error
        ///  thereby making the block builder exclude it from the block.
        /// </summary>
        public static string ExecuteInherentParams()
        {
            return RequestGenerator.GetStorage("Gear", "ExecuteInherent", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> ExecuteInherentDefault
        /// Default value as hex string
        /// </summary>
        public static string ExecuteInherentDefault()
        {
            return "0x01";
        }
        
        /// <summary>
        /// >> ExecuteInherent
        ///  A flag indicating whether the message queue should be processed at the end of a block
        /// 
        ///  If not set, the inherent extrinsic that processes the queue will keep throwing an error
        ///  thereby making the block builder exclude it from the block.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.Bool> ExecuteInherent(string blockhash, CancellationToken token)
        {
            string parameters = GearStorage.ExecuteInherentParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.Bool>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> BlockNumberParams
        ///  The current block number being processed.
        /// 
        ///  It shows block number in which queue is processed.
        ///  May be less than system pallet block number if panic occurred previously.
        /// </summary>
        public static string BlockNumberParams()
        {
            return RequestGenerator.GetStorage("Gear", "BlockNumber", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> BlockNumberDefault
        /// Default value as hex string
        /// </summary>
        public static string BlockNumberDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> BlockNumber
        ///  The current block number being processed.
        /// 
        ///  It shows block number in which queue is processed.
        ///  May be less than system pallet block number if panic occurred previously.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> BlockNumber(string blockhash, CancellationToken token)
        {
            string parameters = GearStorage.BlockNumberParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> GearRunInBlockParams
        ///  A guard to prohibit all but the first execution of `pallet_gear::run()` call in a block.
        /// 
        ///  Set to `Some(())` if the extrinsic is executed for the first time in a block.
        ///  All subsequent attempts would fail with `Error::<T>::GearRunAlreadyInBlock` error.
        ///  Set back to `None` in the `on_finalize()` hook at the end of the block.
        /// </summary>
        public static string GearRunInBlockParams()
        {
            return RequestGenerator.GetStorage("Gear", "GearRunInBlock", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> GearRunInBlockDefault
        /// Default value as hex string
        /// </summary>
        public static string GearRunInBlockDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> GearRunInBlock
        ///  A guard to prohibit all but the first execution of `pallet_gear::run()` call in a block.
        /// 
        ///  Set to `Some(())` if the extrinsic is executed for the first time in a block.
        ///  All subsequent attempts would fail with `Error::<T>::GearRunAlreadyInBlock` error.
        ///  Set back to `None` in the `on_finalize()` hook at the end of the block.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseTuple> GearRunInBlock(string blockhash, CancellationToken token)
        {
            string parameters = GearStorage.GearRunInBlockParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseTuple>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> GearCalls
    /// </summary>
    public sealed class GearCalls
    {
        
        /// <summary>
        /// >> upload_code
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method UploadCode(Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U8> code)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(code.Encode());
            return new Method(104, "Gear", 0, "upload_code", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> upload_program
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method UploadProgram(Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U8> code, Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U8> salt, Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U8> init_payload, Substrate.NetApi.Model.Types.Primitive.U64 gas_limit, Substrate.NetApi.Model.Types.Primitive.U128 value, Substrate.NetApi.Model.Types.Primitive.Bool keep_alive)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(code.Encode());
            byteArray.AddRange(salt.Encode());
            byteArray.AddRange(init_payload.Encode());
            byteArray.AddRange(gas_limit.Encode());
            byteArray.AddRange(value.Encode());
            byteArray.AddRange(keep_alive.Encode());
            return new Method(104, "Gear", 1, "upload_program", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> create_program
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method CreateProgram(Substrate.Vara.NET.NetApiExt.Generated.Model.gear_core.ids.CodeId code_id, Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U8> salt, Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U8> init_payload, Substrate.NetApi.Model.Types.Primitive.U64 gas_limit, Substrate.NetApi.Model.Types.Primitive.U128 value, Substrate.NetApi.Model.Types.Primitive.Bool keep_alive)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(code_id.Encode());
            byteArray.AddRange(salt.Encode());
            byteArray.AddRange(init_payload.Encode());
            byteArray.AddRange(gas_limit.Encode());
            byteArray.AddRange(value.Encode());
            byteArray.AddRange(keep_alive.Encode());
            return new Method(104, "Gear", 2, "create_program", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> send_message
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SendMessage(Substrate.Vara.NET.NetApiExt.Generated.Model.gear_core.ids.ProgramId destination, Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U8> payload, Substrate.NetApi.Model.Types.Primitive.U64 gas_limit, Substrate.NetApi.Model.Types.Primitive.U128 value, Substrate.NetApi.Model.Types.Primitive.Bool keep_alive)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(destination.Encode());
            byteArray.AddRange(payload.Encode());
            byteArray.AddRange(gas_limit.Encode());
            byteArray.AddRange(value.Encode());
            byteArray.AddRange(keep_alive.Encode());
            return new Method(104, "Gear", 3, "send_message", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> send_reply
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SendReply(Substrate.Vara.NET.NetApiExt.Generated.Model.gear_core.ids.MessageId reply_to_id, Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U8> payload, Substrate.NetApi.Model.Types.Primitive.U64 gas_limit, Substrate.NetApi.Model.Types.Primitive.U128 value, Substrate.NetApi.Model.Types.Primitive.Bool keep_alive)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(reply_to_id.Encode());
            byteArray.AddRange(payload.Encode());
            byteArray.AddRange(gas_limit.Encode());
            byteArray.AddRange(value.Encode());
            byteArray.AddRange(keep_alive.Encode());
            return new Method(104, "Gear", 4, "send_reply", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> claim_value
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ClaimValue(Substrate.Vara.NET.NetApiExt.Generated.Model.gear_core.ids.MessageId message_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(message_id.Encode());
            return new Method(104, "Gear", 5, "claim_value", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> run
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Run(Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U64> max_gas)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(max_gas.Encode());
            return new Method(104, "Gear", 6, "run", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_execute_inherent
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetExecuteInherent(Substrate.NetApi.Model.Types.Primitive.Bool value)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(value.Encode());
            return new Method(104, "Gear", 7, "set_execute_inherent", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> pay_program_rent
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method PayProgramRent(Substrate.Vara.NET.NetApiExt.Generated.Model.gear_core.ids.ProgramId program_id, Substrate.NetApi.Model.Types.Primitive.U32 block_count)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(program_id.Encode());
            byteArray.AddRange(block_count.Encode());
            return new Method(104, "Gear", 8, "pay_program_rent", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> resume_session_init
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ResumeSessionInit(Substrate.Vara.NET.NetApiExt.Generated.Model.gear_core.ids.ProgramId program_id, Substrate.Vara.NET.NetApiExt.Generated.Types.Base.BTreeSetT1 allocations, Substrate.Vara.NET.NetApiExt.Generated.Model.gear_core.ids.CodeId code_hash)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(program_id.Encode());
            byteArray.AddRange(allocations.Encode());
            byteArray.AddRange(code_hash.Encode());
            return new Method(104, "Gear", 9, "resume_session_init", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> resume_session_push
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ResumeSessionPush(Substrate.NetApi.Model.Types.Primitive.U128 session_id, Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.Vara.NET.NetApiExt.Generated.Model.gear_core.pages.GearPage, Substrate.Vara.NET.NetApiExt.Generated.Model.gear_core.memory.PageBuf>> memory_pages)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(session_id.Encode());
            byteArray.AddRange(memory_pages.Encode());
            return new Method(104, "Gear", 10, "resume_session_push", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> resume_session_commit
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ResumeSessionCommit(Substrate.NetApi.Model.Types.Primitive.U128 session_id, Substrate.NetApi.Model.Types.Primitive.U32 block_count)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(session_id.Encode());
            byteArray.AddRange(block_count.Encode());
            return new Method(104, "Gear", 11, "resume_session_commit", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> GearConstants
    /// </summary>
    public sealed class GearConstants
    {
        
        /// <summary>
        /// >> Schedule
        ///  Cost schedule and limits.
        /// </summary>
        public Substrate.Vara.NET.NetApiExt.Generated.Model.pallet_gear.schedule.Schedule Schedule()
        {
            var result = new Substrate.Vara.NET.NetApiExt.Generated.Model.pallet_gear.schedule.Schedule();
            result.Create("0x01204E0000000100000004000080000000000200100000000100002000000020000000000080000" +
                    "00008000B0000007E000000732C0000422B0000C24B0000473C0000DD1C0000B6180000440C00004" +
                    "B1600001E270000580100001E120000164C00001A090000000000000903000075070000950700006" +
                    "6060000300A0000BC380000441A00007118000047180000861400002D040000D4020000830E0000F" +
                    "F0800000C03000053030000D5030000CC0300009C030000A102000044010000D5000000090E0000F" +
                    "A070000A00D0000E9070000510D0000B3070000770D000040080000A90D0000E8070000FF0D00003" +
                    "1080000FE0D0000F20800005C0E0000690800004E0E0000DB0800005B0E000046080000EB0900005" +
                    "6040000DA090000BB040000950D00005909000022100000AD0F0000F6110000920F0000F43F0000C" +
                    "A3400006811000012100000B40A00002D050000450A0000B90400002D0A0000FB04000058080000F" +
                    "D0300009608000021040000760800005904000054080000EF0300005C0800001B0400007A35AA010" +
                    "03A37130000EE16300000CE768D0000C6478B0000F6834B0000A27B480000B6E3430000927301000" +
                    "0A62A4300002A6846000026C44500009233450000B210440000825F6F00009102001E3543000052F" +
                    "D470000B61484000012C2920100BE43C500000D04007AEEC80000090400DAFF4800000604850000E" +
                    "D0500FE43AC00002AECAE0000522FD800002D0400D679BC0000D2C26E04009A064804003ACA37020" +
                    "07E551A00007A462A03000AAF7900003A7AEC0400850600920A720400990600510A009A55460000B" +
                    "E5943000046D74500002238410300FA6A100D0042E1540000990200A2BAD0000072E3D60000E25B6" +
                    "500009D020042A6580000F104005A6D4400008ACCC62E0012EAF32C006A74B81D00321E9A2D0052D" +
                    "3602C000696830000FE7B07010015040021200092100A0100F903002D2000F2DBD10600229251080" +
                    "0669D550200228E1907005A5A240800EECC2D02003E9673020082E6CF180091010032F2380000000" +
                    "0212800E10300210900A2C7EA438939B293030000");
            return result;
        }
        
        /// <summary>
        /// >> OutgoingLimit
        ///  The maximum amount of messages that can be produced in single run.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 OutgoingLimit()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x00040000");
            return result;
        }
        
        /// <summary>
        /// >> PerformanceMultiplier
        ///  Performance multiplier.
        /// </summary>
        public Substrate.Vara.NET.NetApiExt.Generated.Model.gear_core.percent.Percent PerformanceMultiplier()
        {
            var result = new Substrate.Vara.NET.NetApiExt.Generated.Model.gear_core.percent.Percent();
            result.Create("0x64000000");
            return result;
        }
        
        /// <summary>
        /// >> MailboxThreshold
        ///  The minimal gas amount for message to be inserted in mailbox.
        /// 
        ///  This gas will be consuming as rent for storing and message will be available
        ///  for reply or claim, once gas ends, message removes.
        /// 
        ///  Messages with gas limit less than that minimum will not be added in mailbox,
        ///  but will be seen in events.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U64 MailboxThreshold()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U64();
            result.Create("0xB80B000000000000");
            return result;
        }
        
        /// <summary>
        /// >> ReservationsLimit
        ///  Amount of reservations can exist for 1 program.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U64 ReservationsLimit()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U64();
            result.Create("0x0001000000000000");
            return result;
        }
        
        /// <summary>
        /// >> ProgramRentFreePeriod
        ///  The free of charge period of rent.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 ProgramRentFreePeriod()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x00D44900");
            return result;
        }
        
        /// <summary>
        /// >> ProgramResumeMinimalRentPeriod
        ///  The minimal amount of blocks to resume.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 ProgramResumeMinimalRentPeriod()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x004E0C00");
            return result;
        }
        
        /// <summary>
        /// >> ProgramRentCostPerBlock
        ///  The program rent cost per block.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 ProgramRentCostPerBlock()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x40597307000000000000000000000000");
            return result;
        }
        
        /// <summary>
        /// >> ProgramResumeSessionDuration
        ///  The amount of blocks for processing resume session.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 ProgramResumeSessionDuration()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0xB0040000");
            return result;
        }
        
        /// <summary>
        /// >> ProgramRentEnabled
        ///  The flag determines if program rent mechanism enabled.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.Bool ProgramRentEnabled()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.Bool();
            result.Create("0x00");
            return result;
        }
        
        /// <summary>
        /// >> ProgramRentDisabledDelta
        ///  The constant defines value that is added if the program
        ///  rent is disabled.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 ProgramRentDisabledDelta()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x80130300");
            return result;
        }
    }
    
    /// <summary>
    /// >> GearErrors
    /// </summary>
    public enum GearErrors
    {
        
        /// <summary>
        /// >> MessageNotFound
        /// Message wasn't found in the mailbox.
        /// </summary>
        MessageNotFound,
        
        /// <summary>
        /// >> InsufficientBalance
        /// Not enough balance to execute an action.
        /// 
        /// Usually occurs when the gas_limit specified is such that the origin account can't afford the message.
        /// </summary>
        InsufficientBalance,
        
        /// <summary>
        /// >> GasLimitTooHigh
        /// Gas limit too high.
        /// 
        /// Occurs when an extrinsic's declared `gas_limit` is greater than a block's maximum gas limit.
        /// </summary>
        GasLimitTooHigh,
        
        /// <summary>
        /// >> ProgramAlreadyExists
        /// Program already exists.
        /// 
        /// Occurs if a program with some specific program id already exists in program storage.
        /// </summary>
        ProgramAlreadyExists,
        
        /// <summary>
        /// >> InactiveProgram
        /// Program is terminated.
        /// 
        /// Program init failed, so such message destination is no longer unavailable.
        /// </summary>
        InactiveProgram,
        
        /// <summary>
        /// >> NoMessageTree
        /// Message gas tree is not found.
        /// 
        /// When a message claimed from the mailbox has a corrupted or non-extant gas tree associated.
        /// </summary>
        NoMessageTree,
        
        /// <summary>
        /// >> CodeAlreadyExists
        /// Code already exists.
        /// 
        /// Occurs when trying to save to storage a program code that has been saved there.
        /// </summary>
        CodeAlreadyExists,
        
        /// <summary>
        /// >> CodeDoesntExist
        /// Code does not exist.
        /// 
        /// Occurs when trying to get a program code from storage, that doesn't exist.
        /// </summary>
        CodeDoesntExist,
        
        /// <summary>
        /// >> CodeTooLarge
        /// The code supplied to `upload_code` or `upload_program` exceeds the limit specified in the
        /// current schedule.
        /// </summary>
        CodeTooLarge,
        
        /// <summary>
        /// >> ProgramConstructionFailed
        /// Failed to create a program.
        /// </summary>
        ProgramConstructionFailed,
        
        /// <summary>
        /// >> ValueLessThanMinimal
        /// Value doesn't cover ExistentialDeposit.
        /// </summary>
        ValueLessThanMinimal,
        
        /// <summary>
        /// >> MessageQueueProcessingDisabled
        /// Message queue processing is disabled.
        /// </summary>
        MessageQueueProcessingDisabled,
        
        /// <summary>
        /// >> ResumePeriodLessThanMinimal
        /// Block count doesn't cover MinimalResumePeriod.
        /// </summary>
        ResumePeriodLessThanMinimal,
        
        /// <summary>
        /// >> ProgramNotFound
        /// Program with the specified id is not found.
        /// </summary>
        ProgramNotFound,
        
        /// <summary>
        /// >> FailureRedeemingVoucher
        /// Voucher can't be redeemed
        /// </summary>
        FailureRedeemingVoucher,
        
        /// <summary>
        /// >> GearRunAlreadyInBlock
        /// Gear::run() already included in current block.
        /// </summary>
        GearRunAlreadyInBlock,
        
        /// <summary>
        /// >> ProgramRentDisabled
        /// The program rent logic is disabled.
        /// </summary>
        ProgramRentDisabled,
    }
}
