//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Attributes;
using Substrate.NetApi.Model.Types.Base;
using Substrate.NetApi.Model.Types.Metadata.V14;
using System.Collections.Generic;


namespace Substrate.Vara.NET.NetApiExt.Generated.Model.gear_core.message.context
{
    
    
    /// <summary>
    /// >> 576 - Composite[gear_core.message.context.ContextStore]
    /// </summary>
    [SubstrateNodeType(TypeDefEnum.Composite)]
    public sealed class ContextStore : BaseType
    {
        
        /// <summary>
        /// >> outgoing
        /// </summary>
        public Substrate.Vara.NET.NetApiExt.Generated.Types.Base.BTreeMapT6 Outgoing { get; set; }
        /// <summary>
        /// >> reply
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.Vara.NET.NetApiExt.Generated.Model.gear_core.buffer.LimitedVecT2> Reply { get; set; }
        /// <summary>
        /// >> initialized
        /// </summary>
        public Substrate.Vara.NET.NetApiExt.Generated.Types.Base.BTreeSetT2 Initialized { get; set; }
        /// <summary>
        /// >> awaken
        /// </summary>
        public Substrate.Vara.NET.NetApiExt.Generated.Types.Base.BTreeSetT5 Awaken { get; set; }
        /// <summary>
        /// >> reply_sent
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.Bool ReplySent { get; set; }
        /// <summary>
        /// >> reservation_nonce
        /// </summary>
        public Substrate.Vara.NET.NetApiExt.Generated.Model.gear_core.reservation.ReservationNonce ReservationNonce { get; set; }
        /// <summary>
        /// >> system_reservation
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U64> SystemReservation { get; set; }
        
        /// <inheritdoc/>
        public override string TypeName()
        {
            return "ContextStore";
        }
        
        /// <inheritdoc/>
        public override byte[] Encode()
        {
            var result = new List<byte>();
            result.AddRange(Outgoing.Encode());
            result.AddRange(Reply.Encode());
            result.AddRange(Initialized.Encode());
            result.AddRange(Awaken.Encode());
            result.AddRange(ReplySent.Encode());
            result.AddRange(ReservationNonce.Encode());
            result.AddRange(SystemReservation.Encode());
            return result.ToArray();
        }
        
        /// <inheritdoc/>
        public override void Decode(byte[] byteArray, ref int p)
        {
            var start = p;
            Outgoing = new Substrate.Vara.NET.NetApiExt.Generated.Types.Base.BTreeMapT6();
            Outgoing.Decode(byteArray, ref p);
            Reply = new Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.Vara.NET.NetApiExt.Generated.Model.gear_core.buffer.LimitedVecT2>();
            Reply.Decode(byteArray, ref p);
            Initialized = new Substrate.Vara.NET.NetApiExt.Generated.Types.Base.BTreeSetT2();
            Initialized.Decode(byteArray, ref p);
            Awaken = new Substrate.Vara.NET.NetApiExt.Generated.Types.Base.BTreeSetT5();
            Awaken.Decode(byteArray, ref p);
            ReplySent = new Substrate.NetApi.Model.Types.Primitive.Bool();
            ReplySent.Decode(byteArray, ref p);
            ReservationNonce = new Substrate.Vara.NET.NetApiExt.Generated.Model.gear_core.reservation.ReservationNonce();
            ReservationNonce.Decode(byteArray, ref p);
            SystemReservation = new Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U64>();
            SystemReservation.Decode(byteArray, ref p);
            var bytesLength = p - start;
            TypeSize = bytesLength;
            Bytes = new byte[bytesLength];
            System.Array.Copy(byteArray, start, Bytes, 0, bytesLength);
        }
    }
}
